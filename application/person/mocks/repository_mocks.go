// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_p is a generated GoMock package.
package mock_p

import (
	models "github.com/go-park-mail-ru/2020_1_k-on/application/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method
func (m *MockRepository) GetById(Id uint) (*models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", Id)
	ret0, _ := ret[0].(*models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockRepositoryMockRecorder) GetById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), Id)
}

// Add mocks base method
func (m *MockRepository) Add(p *models.Person) (*models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", p)
	ret0, _ := ret[0].(*models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockRepositoryMockRecorder) Add(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), p)
}

// Update mocks base method
func (m *MockRepository) Update(p *models.Person) (*models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", p)
	ret0, _ := ret[0].(*models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), p)
}

// GetActorsForFilm mocks base method
func (m *MockRepository) GetActorsForFilm(filmId uint) (models.ListPersonArr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsForFilm", filmId)
	ret0, _ := ret[0].(models.ListPersonArr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsForFilm indicates an expected call of GetActorsForFilm
func (mr *MockRepositoryMockRecorder) GetActorsForFilm(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsForFilm", reflect.TypeOf((*MockRepository)(nil).GetActorsForFilm), filmId)
}

// GetActorsForSeries mocks base method
func (m *MockRepository) GetActorsForSeries(seriesId uint) (models.ListPersonArr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsForSeries", seriesId)
	ret0, _ := ret[0].(models.ListPersonArr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsForSeries indicates an expected call of GetActorsForSeries
func (mr *MockRepositoryMockRecorder) GetActorsForSeries(seriesId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsForSeries", reflect.TypeOf((*MockRepository)(nil).GetActorsForSeries), seriesId)
}
