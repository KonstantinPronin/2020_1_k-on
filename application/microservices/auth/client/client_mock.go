// Code generated by MockGen. DO NOT EDIT.
// Source: ./application/microservices/auth/client/client.go

// Package mock_client is a generated GoMock package.
package client

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAuthClient is a mock of IAuthClient interface
type MockIAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthClientMockRecorder
}

// MockIAuthClientMockRecorder is the mock recorder for MockIAuthClient
type MockIAuthClientMockRecorder struct {
	mock *MockIAuthClient
}

// NewMockIAuthClient creates a new mock instance
func NewMockIAuthClient(ctrl *gomock.Controller) *MockIAuthClient {
	mock := &MockIAuthClient{ctrl: ctrl}
	mock.recorder = &MockIAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAuthClient) EXPECT() *MockIAuthClientMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockIAuthClient) Login(login, password string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login
func (mr *MockIAuthClientMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthClient)(nil).Login), login, password)
}

// Check mocks base method
func (m *MockIAuthClient) Check(sessionId string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", sessionId)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockIAuthClientMockRecorder) Check(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIAuthClient)(nil).Check), sessionId)
}

// Logout mocks base method
func (m *MockIAuthClient) Logout(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockIAuthClientMockRecorder) Logout(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIAuthClient)(nil).Logout), sessionId)
}
