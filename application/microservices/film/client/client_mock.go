// Code generated by MockGen. DO NOT EDIT.
// Source: ./application/microservices/film/client/client.go

// Package mock_client is a generated GoMock package.
package client

import (
	models "github.com/go-park-mail-ru/2020_1_k-on/application/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIFilmFilterClient is a mock of IFilmFilterClient interface
type MockIFilmFilterClient struct {
	ctrl     *gomock.Controller
	recorder *MockIFilmFilterClientMockRecorder
}

// MockIFilmFilterClientMockRecorder is the mock recorder for MockIFilmFilterClient
type MockIFilmFilterClientMockRecorder struct {
	mock *MockIFilmFilterClient
}

// NewMockIFilmFilterClient creates a new mock instance
func NewMockIFilmFilterClient(ctrl *gomock.Controller) *MockIFilmFilterClient {
	mock := &MockIFilmFilterClient{ctrl: ctrl}
	mock.recorder = &MockIFilmFilterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFilmFilterClient) EXPECT() *MockIFilmFilterClientMockRecorder {
	return m.recorder
}

// GetFilteredFilms mocks base method
func (m *MockIFilmFilterClient) GetFilteredFilms(fields map[string][]string) (models.Films, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredFilms", fields)
	ret0, _ := ret[0].(models.Films)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFilteredFilms indicates an expected call of GetFilteredFilms
func (mr *MockIFilmFilterClientMockRecorder) GetFilteredFilms(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredFilms", reflect.TypeOf((*MockIFilmFilterClient)(nil).GetFilteredFilms), fields)
}

// GetFilterFields mocks base method
func (m *MockIFilmFilterClient) GetFilterFields() (map[string]models.Genres, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilterFields")
	ret0, _ := ret[0].(map[string]models.Genres)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFilterFields indicates an expected call of GetFilterFields
func (mr *MockIFilmFilterClientMockRecorder) GetFilterFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilterFields", reflect.TypeOf((*MockIFilmFilterClient)(nil).GetFilterFields))
}
