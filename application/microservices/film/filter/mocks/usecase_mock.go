// Code generated by MockGen. DO NOT EDIT.
// Source: ./application/microservices/film/filter/usecase.go

// Package mock_filter is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_1_k-on/application/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// FilterFilmList mocks base method
func (m *MockUseCase) FilterFilmList(fields map[string][]string) (models.Films, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterFilmList", fields)
	ret0, _ := ret[0].(models.Films)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FilterFilmList indicates an expected call of FilterFilmList
func (mr *MockUseCaseMockRecorder) FilterFilmList(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterFilmList", reflect.TypeOf((*MockUseCase)(nil).FilterFilmList), fields)
}

// FilterFilmData mocks base method
func (m *MockUseCase) FilterFilmData() (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterFilmData")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FilterFilmData indicates an expected call of FilterFilmData
func (mr *MockUseCaseMockRecorder) FilterFilmData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterFilmData", reflect.TypeOf((*MockUseCase)(nil).FilterFilmData))
}
